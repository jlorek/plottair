<script src="https://unpkg.com/delaunator@2.0.0/delaunator.min.js"></script>
<h1>Triangulation</h1>

<div id="app">
  <%= form_for @conn, page_path(@conn, :hpgl_post), [ref: "form"], fn _ -> %>
    <div class="form-group">
      <label>How many points?</label>
      <input type="text" class="form-control" v-model="numPoints" />
    </div>

    <div class="form-group">
      <label>Signature?</label>
      <input type="text" class="form-control" v-model="signature" placeholder="Chatchphrase here..." />
    </div>

    <input type="hidden" name="hpgl" v-model="hpgl">

    <div class="form-group">
      <input type="button" class="btn btn-primary" value="Generate" v-on:click="generate"/>
    </div>
  <% end %>
</div>

<script language="javascript">
  let app = new Vue({
    el: '#app',
    data: {
      numPoints: 75,
      signature: "Delaunay Triangulation",
      hpgl: ""
    },
    methods: {
      generate: function() {
        let builder = new HpglBuilder(true);

        let xMin = 0;
        let xMax = 98;
        let yMin = 0;
        let yMax = 100;

        let xPos = 15370;
        let yPos = 1863;

        // signature
        builder.pu(xPos, yPos);
        builder.si(0.2, 0.2);
        builder.di(0, 1);
        builder.lb(this.signature);

        // scaling
        builder.sc(0, 100, 0, 100);

        // frame
        builder.pu(xMin, yMin);
        builder.pd(xMin, yMax)
        builder.pd(xMax, yMax)
        builder.pd(xMax, yMin)
        builder.pd(xMin, yMin)
        builder.pu();

        let points = [[xMin, yMin], [xMax, yMin], [xMin, yMax], [xMax, yMax]];
        for (let i = 0; i < this.numPoints; ++i) {
            points.push([_.random(xMin, xMax), _.random(yMin, yMax)]);
        }
        
        let delaunay = Delaunator.from(points);
        let triangles = delaunay.triangles;
        for (var i = 0; i < triangles.length; i += 3) {
            let p0 = triangles[i];
            let p1 = triangles[i + 1];
            let p2 = triangles[i + 2];

            builder.pu(points[p0][0], points[p0][1]);
            builder.pd(points[p1][0], points[p1][1]);
            builder.pd(points[p2][0], points[p2][1]);
            builder.pd(points[p0][0], points[p0][1]);
        }

        builder.pu();
        builder.sp(0);
        
        this.hpgl = builder.get();
        app.$nextTick(() => { this.$refs.form.submit(); });
      }
    }
  });
</script>